{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/StatisticsStaled.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Section","title","children","protoType","PropTypes","string","isRequired","node","FeedbackOptions","onLeaveFeedback","options","map","option","type","name","onClick","charAt","toUpperCase","slice","func","arrayOf","Score","styled","span","scoreType","Statistics","good","neutral","bad","total","positivePercentage","number","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","className","Object","keys","event","target","prevState","Math","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAEMA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MAKPF,EAAQG,UAAY,CAClBF,MAAOG,IAAUC,OAAOC,WACxBJ,SAAUE,IAAUG,MAGPP,QCbTQ,G,MAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,QAC1C,OACE,mCACGA,EAAQC,KAAI,SAAAC,GACX,OACE,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAASN,EAJX,SAMGG,EAAOI,OAAO,GAAGC,cAAgBL,EAAOM,MAAM,IAJ1CN,UAYjBJ,EAAgBL,UAAY,CAC1BM,gBAAiBL,IAAUe,KAAKb,WAChCI,QAASN,IAAUgB,QAAQhB,IAAUC,OAAOC,aAG/BE,I,EAAAA,I,OCzBFa,E,MAAQC,EAAOC,KAAV,2CACP,gBAAGC,EAAH,EAAGA,UAAH,OACPA,EAAY,GACR,UACAA,EAAY,GACZ,UACAA,EAAY,GACZ,UACAA,GAAa,GACb,UACA,MCTFC,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,mDACqB,IACnB,eAACR,EAAD,CAAOG,UAAWM,EAAlB,UAAuCA,EAAvC,cAMRL,EAAWtB,UAAY,CACrBuB,KAAMtB,IAAU2B,OAAOzB,WACvBqB,QAASvB,IAAU2B,OAAOzB,WAC1BsB,IAAKxB,IAAU2B,OAAOzB,WACtBuB,MAAOzB,IAAU2B,OAAOzB,WACxBwB,mBAAoB1B,IAAU2B,OAAOzB,YAGxBmB,QCxBTO,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,4BAAIA,OAKVD,EAAa7B,UAAY,CACvB8B,QAAS7B,IAAUC,OAAOC,YAGb0B,QCPA,SAASE,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOR,EAAP,KAAgBU,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOP,EAAP,KAAYU,EAAZ,KACM5B,EAAU,CAAEgB,OAAMC,UAASC,OAoB3BW,EAAqB,WACzB,OAAOb,EAAOC,EAAUC,GAO1B,OACE,sBAAKY,UAAU,MAAf,UACE,cAAC,EAAD,CAASvC,MAAM,wBAAf,SACE,cAAC,EAAD,CACES,QAAS+B,OAAOC,KAAKhC,GACrBD,gBA/BkB,SAAAkC,GAExB,OADiBA,EAAMC,OAAf9B,MAEN,IAAK,OACHsB,GAAQ,SAAAS,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHR,GAAW,SAAAQ,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHP,GAAO,SAAAO,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,aAoBF,cAAC,EAAD,CAAS5C,MAAM,aAAf,SACGsC,IAAuB,EACtB,cAAC,EAAD,CACEb,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,IACPT,mBAlBDgB,KAAKC,MAAOrB,EAAOa,IAAwB,OAqB5C,cAAC,EAAD,CAAcN,QAAQ,2BCpDhCe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.333ce69f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n};\n\nSection.protoType = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import './FeedbackOptions.scss';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => {\n  return (\n    <>\n      {options.map(option => {\n        return (\n          <button\n            type=\"button\"\n            key={option}\n            name={option}\n            onClick={onLeaveFeedback}\n          >\n            {option.charAt(0).toUpperCase() + option.slice(1)}\n          </button>\n        );\n      })}\n    </>\n  );\n};\n\nFeedbackOptions.protoType = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n};\n\nexport default FeedbackOptions;\n","import styled from 'styled-components';\n\nexport const Score = styled.span`\n  color: ${({ scoreType }) =>\n    scoreType < 50\n      ? '#DB4437'\n      : scoreType < 80\n      ? '#E2B534'\n      : scoreType < 90\n      ? '#0F9D58'\n      : scoreType >= 90\n      ? '#4285F4'\n      : ''};\n`;\n","import PropTypes from 'prop-types';\nimport { Score } from './StatisticsStaled';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>\n        Positive feedback:{' '}\n        <Score scoreType={positivePercentage}>{positivePercentage}%</Score>\n      </p>\n    </>\n  );\n};\n\nStatistics.protoType = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return (\n    <>\n      <p>{message}</p>\n    </>\n  );\n};\n\nNotification.protoType = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState } from 'react';\nimport './App.scss';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const options = { good, neutral, bad };\n\n  const incrementFeedback = event => {\n    const { name } = event.target;\n    switch (name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.floor((good / countTotalFeedback()) * 100);\n  };\n\n  return (\n    <div className=\"App\">\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={Object.keys(options)}\n          onLeaveFeedback={incrementFeedback}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          ></Statistics>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}